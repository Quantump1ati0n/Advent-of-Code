import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class Day5 {
    public static void main(String args[]) throws FileNotFoundException {

        //Creating the file object
        File input = new File("input5-backup.txt");

        //Creating a Scanner object
        Scanner scanner = new Scanner(input);

        //initialize stacks
        ArrayList<Character> stackOne = new ArrayList<>();
        ArrayList<Character> stackTwo = new ArrayList<>();
        ArrayList<Character> stackThree = new ArrayList<>();
        ArrayList<Character> stackFour = new ArrayList<>();
        ArrayList<Character> stackFive = new ArrayList<>();
        ArrayList<Character> stackSix = new ArrayList<>();
        ArrayList<Character> stackSeven = new ArrayList<>();
        ArrayList<Character> stackEight = new ArrayList<>();
        ArrayList<Character> stackNine = new ArrayList<>();

        //add elements to stack one
        char[] stackOneFill = {'Q','W','P','S','Z','R','H','D'};
        for (char character : stackOneFill) {
            stackOne.add(character);
        }

        //add elements to stack two
        char[] stackTwoFill = {'V','B','R','W','Q','H','F'};
        for (char character : stackTwoFill) {
            stackTwo.add(character);
        }

        //add elements to stack three
        char[] stackThreeFill = {'C','V','S','H'};
        for (char character : stackThreeFill) {
            stackThree.add(character);
        }

        //add elements to stack four
        char[] stackFourFill = {'H','F','G'};
        for (char character : stackFourFill) {
            stackFour.add(character);
        }

        //add elements to stack five
        char[] stackFiveFill = {'P','G','J','B','Z'};
        for (char character : stackFiveFill) {
            stackFive.add(character);
        }

        //add elements to stack six
        char[] stackSixFill = {'Q','T','J','H','W','F','L'};
        for (char character : stackSixFill) {
            stackSix.add(character);
        }

        //add elements to stack seven
        char[] stackSevenFill = {'Z','T','W','D','L','V','J','N'};
        for (char character : stackSevenFill) {
            stackSeven.add(character);
        }

        //add elements to stack eight
        char[] stackEightFill = {'D','T','Z','C','J','G','H','F'};
        for (char character : stackEightFill) {
            stackEight.add(character);
        }

        //add elements to stack nine
        char[] stackNineFill = {'W','P','V','M','B','H'};
        for (char character : stackNineFill) {
            stackNine.add(character);
        }

        while (scanner.hasNext()) {
            String line = scanner.nextLine();

            //extract how many crates to move
            int indexOfFirstSpace = line.indexOf(' ');
            int indexOfSecondSpace = line.indexOf(' ', indexOfFirstSpace + 1);
            String crates = line.substring(indexOfFirstSpace + 1, indexOfSecondSpace);
            int cratesToMove = Integer.parseInt(crates);

            //extract initial stack
            int indexOfThirdSpace = line.indexOf(' ', indexOfSecondSpace + 1);
            int indexOfFourthSpace = line.indexOf(' ', indexOfThirdSpace + 1);
            String from = line.substring(indexOfThirdSpace + 1, indexOfFourthSpace);
            int initialStack = Integer.parseInt(from);

            //extract ending stack
            int indexOfFifthSpace = line.indexOf(' ', indexOfFourthSpace + 1);
            String to = line.substring(indexOfFifthSpace + 1, line.length());
            int endStack = Integer.parseInt(to);

            //complete instruction
            for (int i = 1; i <= cratesToMove; i++) {

                //get last element from initial stack
                char elementToMove = 'x';
                switch (initialStack) {
                    case 1: elementToMove = stackOne.get(stackOne.size() - 1);
                            break;
                    case 2: elementToMove = stackTwo.get(stackTwo.size() - 1);
                            break;
                    case 3: elementToMove = stackThree.get(stackThree.size() - 1);
                            break;
                    case 4: elementToMove = stackFour.get(stackFour.size() - 1);
                            break;
                    case 5: elementToMove = stackFive.get(stackFive.size() - 1);
                            break;
                    case 6: elementToMove = stackSix.get(stackSix.size() - 1);
                            break;
                    case 7: elementToMove = stackSeven.get(stackSeven.size() - 1);
                            break;
                    case 8: elementToMove = stackEight.get(stackEight.size() - 1);
                            break;
                    case 9: elementToMove = stackNine.get(stackNine.size() - 1);
                            break;
                }

                //add to ending stack
                switch (endStack) {
                    case 1: stackOne.add(elementToMove);
                        break;
                    case 2: stackTwo.add(elementToMove);
                        break;
                    case 3: stackThree.add(elementToMove);
                        break;
                    case 4: stackFour.add(elementToMove);
                        break;
                    case 5: stackFive.add(elementToMove);
                        break;
                    case 6: stackSix.add(elementToMove);
                        break;
                    case 7: stackSeven.add(elementToMove);
                        break;
                    case 8: stackEight.add(elementToMove);
                        break;
                    case 9: stackNine.add(elementToMove);
                        break;
                }

                //delete from initial stack
                switch (initialStack) {
                    case 1: stackOne.remove(stackOne.size() - 1);
                        break;
                    case 2: stackTwo.remove(stackTwo.size() - 1);
                        break;
                    case 3: stackThree.remove(stackThree.size() - 1);
                        break;
                    case 4: stackFour.remove(stackFour.size() - 1);
                        break;
                    case 5: stackFive.remove(stackFive.size() - 1);
                        break;
                    case 6: stackSix.remove(stackSix.size() - 1);
                        break;
                    case 7: stackSeven.remove(stackSeven.size() - 1);
                        break;
                    case 8: stackEight.remove(stackEight.size() - 1);
                        break;
                    case 9: stackNine.remove(stackNine.size() - 1);
                        break;
                }
            }

        }
        System.out.println(stackOne.get(stackOne.size() - 1));
        System.out.println(stackTwo.get(stackTwo.size() - 1));
        System.out.println(stackThree.get(stackThree.size() - 1));
        System.out.println(stackFour.get(stackFour.size() - 1));
        System.out.println(stackFive.get(stackFive.size() - 1));
        System.out.println(stackSix.get(stackSix.size() - 1));
        System.out.println(stackSeven.get(stackSeven.size() - 1));
        System.out.println(stackEight.get(stackEight.size() - 1));
        System.out.println(stackNine.get(stackNine.size() - 1));
    }
}
